{"name":"Castoro","tagline":"A tool to stream local files to chromecast. Device discovery, volume control, seeking support, automatic subtitles loading based on media filename, audio transcoding","body":"Description\r\n-----------\r\n\r\nA tool to cast your local files to chromecast. Device discovery, volume\r\ncontrol, seeking support, automatic subtitles loading based on media filename,\r\naudio transcoding. Experimental user interface is being worked on.\r\n\r\n\r\nDesktop application\r\n-------------------\r\n\r\nFirst binary distribution is now\r\n[available for OSX](http://davibe.github.io/castoro-osx/)\r\n\r\n\r\nCommandline tool\r\n----------------\r\n\r\n\r\n### Install\r\n\r\nYou can user npm published version\r\n    \r\n    npm install -g castoro\r\n\r\nor roll one yourself from this repo\r\n\r\n    npm install -g coffee-script\r\n    cd [this repo]\r\n    npm run-script prepublish\r\n    npm install -g\r\n\r\n\r\n### Usage\r\n\r\nCommand line usage goes like this\r\n\r\n      castoro \\\r\n        --mode [original|stream-transcode|transcode] \\\r\n        --input [path/to/file.mkv]\r\n\r\nOptional arguments\r\n\r\n        --ip [ip of your machine]\r\n        --port [http port to use]\r\n        --cli-controller #Â enables cli controller\r\n\r\n\r\n#### Mode(s) explained\r\n\r\n- **original**: The tool will stream un-modified input file using HTTP. Since chromecast is\r\npicky about formats (expecially audio ones) the file must be properly encoded.\r\n- **stream-transcode** (default): The tool will live transcode the input file to fit chromecast audio capabilities\r\nusing ffmpeg. Seeking is supported in this case, but slower.\r\n- **transcode**: The tool will\r\n    1. start to cast the input media to the chromecast using stream-transcode mode\r\n       (slower seeking)\r\n    2. start a transcoding process converts the entire input media\r\n    3. as soon as the transcoding (2) is finished it will switch playback to the\r\n       trascoded file (faster seeking)\r\n\r\n\r\n### Cli controller\r\n\r\nIf you enable the cli controller you can use keys to control playback/volume\r\nright from the console\r\n\r\n- Up: Volume up\r\n- Down: Volume down\r\n- Left: RR (10 min)\r\n- Shift+Left: RR (1 min)\r\n- Right: FF (10 min)\r\n- Shift+Right: FF (1 min)\r\n- Space: Pause/Unpause\r\n- key \"s\": Print player status\r\n- key \"q\": Quit\r\n\r\n\r\n### UI Controller (Experimental)\r\n\r\nExperimental UI allows drag-dropping video files and control playback as a\r\ndesktop application. See screenshots\r\n\r\n![](https://raw.githubusercontent.com/davibe/castoro/master/images/ui01.PNG)\r\n\r\nCurrent status of UI support is\r\n\r\n- still very experimental\r\n- using [electron.atom.io](http://electron.atom.io)\r\n- tested on Mac OSX\r\n\r\nTo test it you can clone this repo and then use\r\n\r\n    npm run-script prepublish; electron .\r\n\r\n\r\nFFMPEG dependency\r\n-----------------\r\n\r\nThis tool uses FFMpeg. FFMpeg must be installed on the system. I run it on OSX\r\nwhere I installed ffmpeg using Homebrew like this\r\n\r\n    brew install ffmpeg --with-faac --with-fdk-aac\r\n\r\nBundled distributions of the application also include ffmpeg binaries.\r\n\r\nTodos\r\n-----\r\n\r\nPull requests are welcome\r\n\r\n- Transcode video when needed (currently we just transcode audio)\r\n- Properly report errors\r\n- Automatically pick an available port\r\n- Support multiple chromecasts in the same network\r\n- Distrubuted bundled application with UI and possibly ffmpeg binaries\r\n\r\n\r\n![](https://raw.githubusercontent.com/davibe/castoro/master/images/castoro.png)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}